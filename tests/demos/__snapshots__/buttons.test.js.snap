// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`demos/components/buttons renders itself correctly 1`] = `
<section>
  <h1>
    Button examples
  </h1>
  <div>
    <div
      style={
        Object {
          "padding": "16px",
        }
      }
    >
      <button
        className="mdc-button"
        onClick={null}
      >
        
        Hello
      </button>
    </div>
    <div
      style={
        Object {
          "padding": "16px",
        }
      }
    >
      <button
        className="mdc-button mdc-button--raised"
        onClick={null}
      >
        <i
          className="mdc-button__icon material-icons"
        >
          favorite
        </i>
        Hello
      </button>
    </div>
    <div
      style={
        Object {
          "padding": "16px",
        }
      }
    >
      <button
        className="mdc-button mdc-button--raised"
        onClick={null}
      >
        
        Hello
      </button>
    </div>
    <div
      style={
        Object {
          "padding": "16px",
        }
      }
    >
      <button
        className="mdc-button mdc-button--raised"
        onClick={null}
      >
        
        Hello
      </button>
    </div>
    <div
      style={
        Object {
          "padding": "16px",
        }
      }
    >
      <button
        className="mdc-button mdc-button--unelevated mdc-button--compact secondary-filled-button"
        onClick={null}
      >
        
        Hello
      </button>
    </div>
    <div
      style={
        Object {
          "padding": "16px",
        }
      }
    >
      <button
        className="mdc-button mdc-button--stroked mdc-button--dense"
        onClick={null}
      >
        
        Hello
      </button>
    </div>
    <div
      style={
        Object {
          "padding": "16px",
        }
      }
    >
      <a
        className="mdc-button mdc-button--raised"
        href="#"
      >
        
        Hello
      </a>
    </div>
  </div>
  <h2>
    Properties:
  </h2>
  <div
    className="mdc-layout-grid"
  >
    <div
      className="mdc-layout-grid__inner"
    >
      <div
        className="mdc-layout-grid__cell"
      >
        Name
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
        Type
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
        Desc
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        backgroundColor
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        string
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        Color of button when mouse is not hovering over it.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        children
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        node
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        This is what will be displayed inside the button. If a label is specified, the text within the label prop will be displayed. Otherwise, the component will expect children which will then be displayed. (In our example, we are nesting an &lt;input type="file" /&gt; and a span that acts as our label to be displayed.) This only applies to flat and raised buttons.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        className
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        string
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        The CSS class name of the root element.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        containerElement
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        element
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        The element to use as the container for the FlatButton. Either a string to use a DOM element or a ReactElement. This is useful for wrapping the FlatButton in a custom Link component. If a ReactElement is given, ensure that it passes all of its given props through to the underlying DOM element and renders its children prop for proper integration.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        disableTouchRipple
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        bool
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        If true, the element's ripple effect will be disabled.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        disabled
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        bool
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        Disables the button if set to true.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        fullWidth
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        bool
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        If true, the button will take up the full width of its container.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        hoverColor
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        string
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        Color of button when mouse hovers over.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        href
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        string
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        The URL to link to when the button is clicked.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        icon
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        node
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        Use this property to display an icon.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        label
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        validateLabel  
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        Label for the button.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        labelPosition
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        'after'
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        Place label before or after the passed children.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        labelStyle
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        object
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        Override the inline-styles of the button's label element.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        onClick
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        function
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        Callback function fired when the button is clicked. // Signature: // function(event: object) =&gt; void // event: Click event targeting the button.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        onKeyboardFocus
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        function
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        Callback function fired when the element is focused or blurred by the keyboard. // Signature: // function(event: object, isKeyboardFocused: boolean) =&gt; void // event: focus or blur event targeting the element. // isKeyboardFocused: Indicates whether the element is focused.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        primary
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        bool
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        If true, colors button according to primaryTextColor from the Theme.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        rippleColor
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        string
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        Color for the ripple after button is clicked.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        secondary
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        bool
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        If true, colors button according to secondaryTextColor from the theme. The primary prop has precendent if set to true.
         
      </div>
    </div>
    <div
      className="mdc-layout-grid__inner"
      style={
        Object {
          "paddingBottom": "16px",
        }
      }
    >
      <div
        className="mdc-layout-grid__cell"
      >
         
        style
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        object
         
      </div>
      <div
        className="mdc-layout-grid__cell"
      >
         
        Override the inline-styles of the root element.
         
      </div>
    </div>
  </div>
</section>
`;
